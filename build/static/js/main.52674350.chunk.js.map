{"version":3,"sources":["components/Filter.js","services/PersonService.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","onChange","event","console","log","target","value","setFilter","baseUrl","axios","get","then","response","data","newObject","post","catch","error","id","put","delete","PersonForm","onSubmit","preventDefault","nameObject","name","newName","number","newNumber","foundName","persons","find","element","foundNumber","alert","window","confirm","PersonService","setPersons","filter","b","concat","setMessage","setTimeout","setErrMessage","setNewName","setNewNumber","type","Persons","listStyle","display","a","toLowerCase","includes","map","person","key","style","onClick","Notification","message","errMessage","className","App","useState","useEffect","initialData","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52674350.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    \r\n    const handleFilterChange = (event) => {\r\n        console.log(event.target.value)\r\n        props.setFilter(event.target.value)\r\n      }\r\n    \r\n    return (\r\n        <div>\r\n            filter shown with <input onChange={handleFilterChange} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Filter;","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n    .catch(error => {\r\n        console.log(error.response.data)\r\n        return error.response.data\r\n      })\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove };","// import axios from 'axios';\r\nimport React from 'react';\r\nimport PersonService from '../services/PersonService'\r\n\r\nconst PersonForm = (props) => {\r\n\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    console.log(\"button clicked\", event.target)\r\n    const nameObject = {\r\n      name: props.newName,\r\n      number: props.newNumber\r\n    }\r\n\r\n    //Check if name or number already exists\r\n    const foundName = props.persons.find(element => element.name === nameObject.name)\r\n    console.log(foundName)\r\n    const foundNumber = props.persons.find(element => element.number === nameObject.number)\r\n    console.log(foundNumber)\r\n\r\n    if (!foundName && !foundNumber) {\r\n      // send new entry to server & update view with response\r\n      PersonService\r\n        .create(nameObject)\r\n        .then(response => {\r\n          if (!response.error) {\r\n            console.log(\"create person response: \", response)\r\n            props.setPersons(props.persons.concat(response))\r\n            props.setMessage(`${nameObject.name} added to phonebook.`)\r\n            setTimeout(() => {\r\n              props.setMessage(null)\r\n            }, 3000)\r\n          } else {\r\n            // Show validation error from server\r\n            props.setErrMessage(`${response.error}'`)\r\n            setTimeout(() => {\r\n              props.setErrMessage(null)\r\n            }, 5000)\r\n          }\r\n        })\r\n\r\n    } else if (!foundNumber) {\r\n      // alert(`${props.newName} is already added to phonebook!`)\r\n\r\n      if (window.confirm(`${props.newName} is already added to phonebook. Replace the old number with a new one?`)) {\r\n        PersonService\r\n          .update(foundName.id, nameObject)\r\n          .then((response) => {\r\n            console.log(\"update person response: \", response)\r\n            props.setPersons(props.persons.filter(b => b.id !== foundName.id).concat(response))\r\n            props.setMessage(`${nameObject.name}'s number updated.`)\r\n            setTimeout(() => {\r\n              props.setMessage(null)\r\n            }, 3000)\r\n          })\r\n          .catch(error => {\r\n            props.setErrMessage(`${nameObject.name}'s information has already been removed from server.`)\r\n            setTimeout(() => {\r\n              props.setErrMessage(null)\r\n            }, 3000)\r\n          })\r\n      }\r\n\r\n    } else {\r\n      alert(`${props.newNumber} is already added to phonebook!`)\r\n    }\r\n\r\n    props.setNewName('')\r\n    props.setNewNumber('')\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    console.log(event.target.value)\r\n    props.setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    console.log(event.target.value)\r\n    props.setNewNumber(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={addName}>\r\n        <div>\r\n          name: <input value={props.newName} onChange={handleNameChange} />\r\n        </div>\r\n        <div>\r\n          number: <input value={props.newNumber} onChange={handleNumberChange} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonForm;","import React from 'react';\r\nimport PersonService from '../services/PersonService'\r\n\r\nconst Persons = (props) => {\r\n\r\n    const listStyle = { display: 'inline' }\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {props.persons.filter(a => a.name.toLowerCase().includes(props.filter.toLowerCase()))\r\n                    .map(person =>\r\n                        <div key={person.id}>\r\n                            <li key={person.name} style={listStyle}>\r\n                                {person.name} {person.number}\r\n                            </li>\r\n                            <div style={listStyle}>&nbsp;</div>\r\n                            <button onClick={() => {\r\n                                if (window.confirm(`Delete ${person.name}?`)) {\r\n                                    PersonService\r\n                                        .remove(person.id)\r\n                                        .then(() => {\r\n                                            props.setPersons(props.persons.filter(b => b.id !== person.id))\r\n                                            props.setMessage(`${person.name} deleted from phonebook.`)\r\n                                            setTimeout(() => {\r\n                                                props.setMessage(null)\r\n                                            }, 3000)\r\n                                        })\r\n                                }\r\n                            }\r\n                            }>Delete</button>\r\n                        </div>\r\n                    )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Persons;","import React from 'react';\r\n\r\nconst Notification = ({ message, errMessage }) => {\r\n  if (message === null && errMessage === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!errMessage\r\n        ?\r\n        <div className=\"notification\">\r\n          {message}\r\n        </div>\r\n        :\r\n        <div className=\"error\">\r\n          {errMessage}\r\n        </div>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\n// import axios from 'axios'\nimport PersonService from './services/PersonService'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('name')\n  const [ newNumber, setNewNumber ] = useState('number')\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  const [ errMessage, setErrMessage ] = useState(null)\n\n  useEffect(() => {\n    PersonService\n      .getAll()\n      .then(initialData => {\n        setPersons(initialData)\n      })\n      // .catch(error => {\n      //   console.log(error)\n      // })\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} errMessage={errMessage}/>\n      <Filter filter={filter} setFilter={setFilter}/>\n      <h2>Add new</h2>\n      <PersonForm persons={persons} setPersons={setPersons} newName={newName} setNewName={setNewName} newNumber={newNumber} setNewNumber={setNewNumber} setMessage={setMessage} setErrMessage={setErrMessage}/>\n      <h2>Numbers</h2>\n      <Persons persons={persons} setPersons={setPersons} filter={filter} setMessage={setMessage}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}